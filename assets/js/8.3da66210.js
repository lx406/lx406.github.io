(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{360:function(t,a,d){t.exports=d.p+"assets/img/tddcycle.e0316b2c.png"},379:function(t,a,d){"use strict";d.r(a);var s=d(45),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"tdd导览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tdd导览"}},[t._v("#")]),t._v(" tdd导览")]),t._v(" "),s("h2",{attrs:{id:"tdd是什么-为什么要使用tdd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tdd是什么-为什么要使用tdd"}},[t._v("#")]),t._v(" tdd是什么 && 为什么要使用tdd")]),t._v(" "),s("p",[t._v("从敏捷开发说起，敏捷开发以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发。\n既然需求经常变化，那么代码也就会随之变化。此时会出现两个问题")]),t._v(" "),s("ol",[s("li",[t._v("代码会被频繁重构")]),t._v(" "),s("li",[t._v("如何在重构情况下，保证前期功能行为正常")])]),t._v(" "),s("p",[t._v("那么tdd（测试驱动开发）开发模式就是来解决该问题的，其实tdd是敏捷的一种实践。\nTDD是测试驱动开发（Test-Driven Development）的英文简称，是敏捷开发中的一项核心实践和技术，也是一种设计方法论。TDD的原理是在开发功能代码之前，先编写单元测试用例代码，测试代码确定需要编写什么产品代码。TDD虽是敏捷方法的核心实践，但不只适用于XP（Extreme Programming），同样可以适用于其他开发方法和过程。\n"),s("img",{attrs:{src:d(360),alt:"image"}})]),t._v(" "),s("h2",{attrs:{id:"tdd解决什么问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tdd解决什么问题"}},[t._v("#")]),t._v(" tdd解决什么问题")]),t._v(" "),s("ol",[s("li",[t._v("发现bug时可以快速定位，如果当前测试用例都能通过，那么根据场景再将测试用例补全")]),t._v(" "),s("li",[t._v("重构，优化代码时会更大胆")]),t._v(" "),s("li",[t._v("会让开发人员更了解业务")]),t._v(" "),s("li",[t._v("适应变化 高质量高效率地持续交付")])]),t._v(" "),s("h2",{attrs:{id:"什么样的tdd才是真正的tdd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么样的tdd才是真正的tdd"}},[t._v("#")]),t._v(" 什么样的tdd才是真正的tdd")]),t._v(" "),s("h3",{attrs:{id:"tdd原则-功能、代码、用例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tdd原则-功能、代码、用例"}},[t._v("#")]),t._v(" tdd原则（功能、代码、用例）")]),t._v(" "),s("ol",[s("li",[t._v("先写测试用例，再写产品代码")]),t._v(" "),s("li",[t._v("只允许编写刚好能够导致失败的单元测试")]),t._v(" "),s("li",[t._v("只允许编写刚好能够导致失败的单元测试通过的产品代码")])]),t._v(" "),s("h3",{attrs:{id:"tdd的实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tdd的实践"}},[t._v("#")]),t._v(" tdd的实践")]),t._v(" "),s("ol",[s("li",[t._v("分析需求：把测试当做设计，需要先分析需求")]),t._v(" "),s("li",[t._v("找准需求边界：测试用例尽可能不随具体实现的变化而变化")]),t._v(" "),s("li",[t._v("不要实现细节：在敏捷中，实现是会不断变化的，重构是日常发生的，但是需求是相对稳定的（如：一个图片是否存在，我们用例是img元素是否在dom上存在，而不是vue组件是否mount，有可能在下次迭代中mount该元素组件变成了另一个组件）")]),t._v(" "),s("li",[t._v("不要引入额外复杂性：代码通过了测试，可以认为实现了需求。对于无测试用例覆盖的部分，不应加入新代码。（形成mvp版本）")]),t._v(" "),s("li",[t._v("重构：mvp版本显然不是最优代码，需要对代码进行重构")]),t._v(" "),s("li",[t._v("重构后测试挂了，重复上面步骤，形成tdd闭环")])]),t._v(" "),s("h2",{attrs:{id:"tdd的局限性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tdd的局限性"}},[t._v("#")]),t._v(" tdd的局限性")]),t._v(" "),s("ol",[s("li",[t._v("tdd对人员素质要求较高")]),t._v(" "),s("li",[t._v("某些场景下tdd收益没有成本大（如618海报等）")])]),t._v(" "),s("h1",{attrs:{id:"单元测试导览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单元测试导览"}},[t._v("#")]),t._v(" 单元测试导览")]),t._v(" "),s("h2",{attrs:{id:"单元测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[t._v("#")]),t._v(" 单元测试")]),t._v(" "),s("h2",{attrs:{id:"单元测试原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单元测试原则"}},[t._v("#")]),t._v(" 单元测试原则")]),t._v(" "),s("h2",{attrs:{id:"单元测试实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单元测试实例"}},[t._v("#")]),t._v(" 单元测试实例")]),t._v(" "),s("h2",{attrs:{id:"如何在系统中执行单元测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何在系统中执行单元测试"}},[t._v("#")]),t._v(" 如何在系统中执行单元测试")])])}),[],!1,null,null,null);a.default=v.exports}}]);