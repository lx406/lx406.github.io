(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{376:function(t,n,e){"use strict";e.r(n);var p=e(45),o=Object(p.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"vue-test-utils"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue-test-utils"}},[t._v("#")]),t._v(" @vue/test-utils")]),t._v(" "),e("p",[t._v("Vue Test Utils 是 Vue.js 官方的单元测试实用工具库。")]),t._v(" "),e("h3",{attrs:{id:"浅渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浅渲染"}},[t._v("#")]),t._v(" 浅渲染")]),t._v(" "),e("p",[t._v("shallowMount提供一种浅渲染的能力。我们知道，单元测试专注于独立组件的测试，不希望测试的同时涉及到子组件的功能，所以浅渲染帮助我们只渲染该组件的dom，而不渲染子组件。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import { shallowMount } from '@vue/test-utils'\n\nconst wrapper = shallowMount(Component)\nwrapper.vm // 挂载的 Vue 实例\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("/**\n * AppButton组件\n * 单元测试内容包括以下\n * props\n * computed\n * func\n * $emit\n * slots（普通插槽和命名插槽）\n * DOM测试\n */\nimport { shallowMount } from '@vue/test-utils'\nimport AppButton from '@/basics/AppButton.vue'\n\ndescribe('AppButton.vue', () => {\n  /**\n   * 每个it测试一个小项目\n   * 为了便于理解所以注释较多，实际测试代码中酌情增减\n  */\n\n  // 测试内容：props\n  // 自定义props传递给AppButton组件，判断组件有获取到props\n  it('props test', () => {\n    const buttonProps = {\n      type: 'danger',\n      size: 'lg',\n      disabled: true\n    }\n    const wrapper = shallowMount(AppButton, {\n      propsData: buttonProps\n    })\n    // 断言已经获取到props\n    expect(wrapper.props().size).toBe('lg')\n    expect(wrapper.props().type).toBe('danger')\n    expect(wrapper.props().disabled).toBe(true)\n    // 每个it最后都应该销毁wrapper\n    wrapper.destroy()\n  })\n\n  // 测试内容：computed(要注意计算属性不是函数，是变量，测试时很容易看着组件内写法按照函数测试)\n  // 改变props的type，size，disable值时，cssClasses的值也会跟着改变\n  it('computed test', () => {\n    const wrapper = shallowMount(AppButton)\n    // 设置props 断言computed计算属性（注意props有default值）\n    wrapper.setProps({ type: 'danger' })\n    expect(wrapper.vm.cssClasses).toBe('app-button app-button--md app-button--danger')\n    wrapper.setProps({ size: 'lg' })\n    expect(wrapper.vm.cssClasses).toBe('app-button app-button--lg app-button--danger')\n    wrapper.setProps({ disabled: true })\n    expect(wrapper.vm.cssClasses).toBe('app-button app-button--lg app-button--disabled')\n\n    wrapper.destroy()\n  })\n\n  // 测试内容：func测试\n  // 点击按钮组件时，正确触发点击事件\n  it('click button onClick is clled', () => {\n    const wrapper = shallowMount(AppButton)\n    // 创建mock函数\n    const mockFn = jest.fn()\n    // 设置 Wrapper vm 的方法并强制更新。\n    wrapper.setMethods({\n      onClick: mockFn\n    })\n    // 获取buttonDOM元素\n    const button = wrapper.find('button')\n    // 测试点击按钮后有没有正确触发函数\n    // 点击按钮\n    button.trigger('click')\n    // 断言函数被触发，且被触发一次\n    expect(mockFn).toBeCalled()\n    expect(mockFn).toHaveBeenCalledTimes(1)\n\n    wrapper.destroy()\n  })\n\n  // 测试内容：$emit\n  // 函数被触发后，emit的函数也会被触发\n  it('when onClick is called $emit is called', () => {\n    const wrapper = shallowMount(AppButton)\n    // 测试$emmit函数被正确触发\n    // mock函数替代点击按钮后$emit的函数，此处函数名相同，依然为click\n    const mockFn1 = jest.fn()\n    wrapper.vm.$on('click', mockFn1)\n    // 测试mock函数是否被触发，触发的次数,以及参数\n    wrapper.vm.onClick()\n    expect(mockFn1).toBeCalled()\n    expect(mockFn1).toHaveBeenCalledTimes(1)\n    expect(mockFn1).toHaveBeenCalledWith('i am params')\n    // 第二次点击button，依然测试mock函数是否被触发，触发的次数\n    wrapper.vm.onClick()\n    expect(mockFn1).toBeCalled()\n    expect(mockFn1).toHaveBeenCalledTimes(2)\n    expect(mockFn1).toHaveBeenCalledWith('i am params')\n\n    wrapper.destroy()\n  })\n\n  // 测试内容：slots 普通插槽\n  // 测试默认值\n  it('slots default value test', () => {\n    const wrapper = shallowMount(AppButton)\n    const button = wrapper.find('button')\n    expect(button.text()).toBe('submit')\n    wrapper.destroy()\n  })\n\n  // 测试内容：slots 普通插槽\n  // mount时传入自定义的内容作为slots，然后再断言自定义的内容存在与否\n  // 自定义的内容可能会是text，html，componets等允许的内容\n  it('slots test', () => {\n    const wrapper = shallowMount(AppButton, {\n      slots: {\n        default: 'i am slots text' // 自定义slots内容\n      }\n    })\n    const button = wrapper.find('button')\n    expect(button.text()).toBe('i am slots text')\n\n    wrapper.destroy()\n  })\n\n  // 测试内容：slots具名插槽->vue2.6更新后的新语法v-slots，3.0中会延续使用，并废除旧语法（在此提醒注意，不影响测试代码的书写）\n  // 测试方法与slots普通插槽相同，此处传入为html,\n  // 当传入组件时，只需断言wrapper中是否包含组件的DOM元素即可\n  // expect(wrapper.contains('.container')).toBe(true)\n  it('named slots test', () => {\n    const wrapper = shallowMount(AppButton, {\n      slots: {\n        namedSlot: `<span>i am slots html</span>` // 自定义slots内容\n      }\n    })\n    const button = wrapper.find('button')\n    expect(button.contains('span')).toBe(true)\n    const span = wrapper.find('button span')\n    expect(span.text()).toBe('i am slots html')\n\n    wrapper.destroy()\n  })\n\n  // 测试内容：slots作用域插槽->vue2.6更新后的新语法v-slots，3.0中会延续使用，并废除旧语法（在此提醒注意，不影响测试代码的书写）\n  // 测试方法与slots具名插槽相同，此处传入为html,\n  // 当传入组件时，只需断言wrapper中是否包含组件的DOM元素即可\n  // expect(wrapper.contains('.container')).toBe(true)\n  it('scoped slots test', () => {\n    const wrapper = shallowMount(AppButton, {\n      scopedSlots: {\n        scopedSlot: `<span slot-scope=\"foo\">{{ foo.user.lastName }}</span>` // 自定义slots内容\n      }\n    })\n    const button = wrapper.find('button')\n    expect(button.contains('span')).toBe(true)\n    const span = wrapper.find('button span')\n    expect(span.text()).toBe('holy')\n\n    wrapper.destroy()\n  })\n\n  // 测试内容：精准DOM结构测试示例\n  it('DOM test', () => {\n    const wrapper = shallowMount(AppButton)\n    expect(wrapper.contains('button')).toBeTruthy()\n    wrapper.destroy()\n  })\n\n  // 测试内容：snapshot->概括的测试DOM结构\n  // 如果组件内存在比较特殊的需要测试的DOM结构的话，可以单独测试\n  it('matches snapshot', () => {\n    const wrapper = shallowMount(AppButton)\n    expect(wrapper.html()).toMatchSnapshot()\n    wrapper.destroy()\n  })\n})\n\n")])])])])}),[],!1,null,null,null);n.default=o.exports}}]);